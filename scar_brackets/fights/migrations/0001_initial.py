# Generated by Django 5.0.4 on 2025-07-14 03:37

import datetime
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('preferences', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MyPreferences',
            fields=[
                ('preferences_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='preferences.preferences')),
                ('interleave_method', models.CharField(default='Fixed', max_length=100)),
            ],
            bases=('preferences.preferences',),
            managers=[
                ('singleton', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('tournament_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('tournament_name', models.CharField(max_length=100)),
                ('tournament_state', models.CharField(max_length=100)),
                ('tournament_needs_interleave', models.BooleanField(default=False)),
                ('tournament_repair_time', models.IntegerField(default=20)),
            ],
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
                ('url', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot_id', models.CharField(blank=True, max_length=100, null=True)),
                ('bot_name', models.CharField(max_length=100, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tournament_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fights.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_timeout', models.DateTimeField(default=datetime.datetime(1, 1, 1, 7, 52, 58, tzinfo=datetime.timezone.utc))),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('match_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('match_state', models.CharField(max_length=100, null=True)),
                ('updated_at', models.DateTimeField(null=True)),
                ('suggested_play_order', models.IntegerField()),
                ('calculated_play_order', models.IntegerField(default=0)),
                ('estimated_start_time', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('underway_at', models.DateTimeField(blank=True, null=True)),
                ('player1_is_prereq_match_loser', models.BooleanField(default=False)),
                ('player2_is_prereq_match_loser', models.BooleanField(default=False)),
                ('player1_prereq_match_id', models.CharField(blank=True, max_length=100, null=True)),
                ('player2_prereq_match_id', models.CharField(blank=True, max_length=100, null=True)),
                ('player1_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='player1_id', to='fights.bot')),
                ('player2_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='player2_id', to='fights.bot')),
                ('tournament_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fights.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='tournament',
            name='tournament_url',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fights.url'),
        ),
        migrations.AddConstraint(
            model_name='bot',
            constraint=models.UniqueConstraint(fields=('tournament_id', 'bot_id'), name='unique-in-field'),
        ),
    ]
